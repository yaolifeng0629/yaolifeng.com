import {
    ALGORITHMS,
    ANGULAR,
    ANIMATION,
    BROWSER_APIS,
    BUILD_TOOLS,
    CANVAS,
    CI_CD,
    CODE_QUALITY,
    CROSS_PLATFORM,
    CSS,
    DATA_STRUCTURES,
    DESIGN_PATTERNS,
    DEVOPS,
    DOCKER,
    EXPRESS,
    FRAMEWORKS,
    GIT,
    GRAPHQL,
    HTML,
    HTTP,
    JAVASCRIPT,
    LESS,
    MOBILE_DEVELOPMENT,
    NEXTJS,
    NODEJS,
    NUXTJS,
    PERFORMANCE,
    PROGRESSIVE_WEB_APPS,
    REACT,
    REDUX,
    RESPONSIVE_DESIGN,
    REST_API,
    SASS,
    SECURITY,
    SEO,
    STATE_MANAGEMENT,
    SVG,
    TESTING,
    TYPESCRIPT,
    UI_UX,
    VERSION_CONTROL,
    VITE,
    VUE,
    VUEX,
    WEBGL,
    WEBPACK,
    WEBSOCKETS,
    WEB_COMPONENTS,
} from '@/constants';

export default [
    {
        id: 'b795d11d-f019-4daf-9a9f-03766ee61acb',
        url: '/other/shorts/cursor.jpg',
        slug: 'cursor_free_guide',
        createdAt: 1729757310050,
        title: '反复白嫖 Cursor 详细指南',
        description:
            '该博客详细介绍了如何有效地使用Cursor工具进行前端开发，包括如何利用Cursor的各种功能来提高开发效率，避免重复劳动。内容涵盖了Cursor的基本操作、高级技巧、常见问题及解决方案，以及如何通过Cursor实现代码的快速生成和优化。博客还探讨了如何在团队协作中最大化利用Cursor，以及如何通过Cursor的插件和扩展功能进一步提升开发体验。此外，博客还提供了一些实用的案例和示例，帮助读者更好地理解和应用Cursor。',
        tags: [DEVOPS],
        content: '/shorts/反复白嫖 Cursor 详细指南.md',
    },
    {
        id: 'c9febbd3-2529-4723-b121-5554748749c5',
        url: '/other/shorts/chrome_usage_tips_summary.png',
        slug: 'chrome_usage_tips_summary',
        createdAt: 1729499272008,
        title: 'Chrome使用技巧总结',
        description:
            '这些技巧可能包括快捷键的使用、扩展程序的推荐、隐私设置的优化、书签管理、开发者工具的应用等。通过总结这些技巧，博客旨在提升用户的浏览体验，使其能够更好地利用Chrome的功能来提高工作效率和解决日常问题。',
        tags: [BROWSER_APIS, PERFORMANCE, SEO, WEB_COMPONENTS, DESIGN_PATTERNS],
        content: '/shorts/Chrome使用技巧总结.md',
    },
    {
        id: 'fa2ef980-246a-4dac-9c2e-e9167ba08b34',
        url: '/other/shorts/github_usage_tips_summary.png',
        slug: 'github_usage_tips_summary',
        createdAt: 1729499272068,
        title: 'Github使用技巧总结',
        description:
            '这篇博客主要探讨了如何高效地使用Github的功能，包括但不限于创建和管理仓库、分支策略、代码审查、问题跟踪、持续集成与部署等。通过总结这些技巧，作者旨在帮助开发者提升在Github上的工作效率，优化团队协作流程，并确保代码质量和项目管理的有效性。',
        tags: [GIT, VERSION_CONTROL, CODE_QUALITY, DEVOPS, CI_CD],
        content: '/shorts/Github使用技巧总结.md',
    },
    {
        id: '32bd308f-12d1-4efc-8f58-aa326e9275cc',
        url: '/other/shorts/git_usage_tips_summary.png',
        slug: 'git_usage_tips_summary',
        createdAt: 1729499272078,
        title: 'Git使用技巧总结',
        description:
            '这些技巧可能包括如何高效地管理分支、解决合并冲突、使用Git命令进行代码回滚、以及如何利用Git的强大功能来提高团队协作效率。通过总结这些技巧，博客旨在帮助前端开发者更好地掌握Git工具，提升代码管理和版本控制的能力，从而在项目开发中更加得心应手。',
        tags: [GIT, VERSION_CONTROL],
        content: '/shorts/Git使用技巧总结.md',
    },
    {
        id: 'c011b709-9064-4829-a40e-748dd0f594c2',
        url: '/other/shorts/monorepo_pnpm_integration.png',
        slug: 'monorepo_pnpm_integration',
        createdAt: 1729499995761,
        title: 'Monorepo和Pnpm共同使用',
        description:
            'Monorepo架构允许将多个相关项目放在同一个代码仓库中，而Pnpm则通过其独特的依赖管理机制，解决了传统包管理器在Monorepo环境中可能遇到的依赖冗余和性能问题。博客内容可能涵盖了如何配置和使用Pnpm在Monorepo中进行依赖管理，以及这种组合如何帮助开发者更高效地组织和维护大型前端项目。',
        tags: [BUILD_TOOLS, STATE_MANAGEMENT, CODE_QUALITY, VERSION_CONTROL, DEVOPS],
        content: '/shorts/Monorepo和Pnpm共同使用.md',
    },
    {
        id: '86a71193-f1d4-4ada-88b0-1c01583013d2',
        url: '/other/shorts/node_npm_tips_summary.png',
        slug: 'node_npm_tips_summary',
        createdAt: 1729499272128,
        title: 'Node或NPM使用技巧总结',
        description:
            '这些技巧可能包括如何高效地管理依赖包、优化项目结构、提升开发效率、解决常见问题以及利用NPM生态系统中的工具和插件。通过总结这些技巧，博客旨在帮助前端开发者更好地利用Node和NPM来构建和维护现代Web应用，从而提升开发效率和代码质量。',
        tags: [NODEJS, BUILD_TOOLS, VERSION_CONTROL, CODE_QUALITY, DEVOPS],
        content: '/shorts/Node或NPM使用技巧总结.md',
    },
    {
        id: 'e82d956b-a1a6-4317-ba6e-b52fbc2355a4',
        url: '/other/shorts/npm_package_publishing_tips.png',
        slug: 'npm_package_publishing_tips',
        createdAt: 1729499766895,
        title: 'NPM发包那些事',
        description:
            '它涵盖了从初始化项目、编写代码、配置package.json、发布到NPM仓库，到版本管理、依赖处理等各个环节的详细步骤和技巧。通过深入剖析NPM发包的本质，博客旨在帮助前端开发者更好地理解和掌握NPM发包的全过程，提升发包效率和质量。',
        tags: [NODEJS, BUILD_TOOLS, VERSION_CONTROL, CODE_QUALITY, DEVOPS],
        content: '/shorts/NPM发包那些事.md',
    },
    {
        id: 'a3b78bff-56f9-44ba-905a-b2ae2ad8787f',
        url: '/other/shorts/understanding_package_json.png',
        slug: 'understanding_package_json',
        createdAt: 1729499781306,
        title: 'package.json文件了解',
        description:
            '文章详细介绍了package.json文件在Node.js项目中的核心地位，它是项目的配置文件，包含了项目的元数据、依赖项、脚本命令等信息。通过深入剖析package.json的各个字段，如name、version、dependencies、devDependencies、scripts等，读者可以全面了解如何管理和配置前端项目的依赖关系，以及如何通过npm或yarn来安装、更新和运行项目。此外，文章还可能涉及如何优化package.json文件以提高项目的可维护性和开发效率。',
        tags: [BUILD_TOOLS, NODEJS, JAVASCRIPT, VERSION_CONTROL, CODE_QUALITY],
        content: '/shorts/package.json文件了解.md',
    },
    {
        id: '9e6bc6ee-8c0d-460a-ad26-502e6ccb72b7',
        url: '/other/shorts/promise_principles_summary.png',
        slug: 'promise_principles_summary',
        createdAt: 1729499805787,
        title: 'Promise原理学习总结',
        description:
            'Promise是一种用于处理异步操作的对象，它代表了某个异步操作的最终完成或失败，并返回其结果。博客内容可能包括Promise的基本概念、创建和使用Promise的方法、Promise链式调用、错误处理机制以及Promise在实际开发中的应用场景。通过学习Promise的原理，开发者可以更好地理解和掌握异步编程，提高代码的可读性和可维护性。',
        tags: [JAVASCRIPT],
        content: '/shorts/Promise原理学习总结.md',
    },
    {
        id: 'd793a1af-3d13-481e-8fe0-743afa9eea36',
        url: '/other/shorts/require_loader_principles.png',
        slug: 'require_loader_principles',
        createdAt: 1729499956343,
        title: 'require加载器的原理',
        description:
            '文章详细介绍了require加载器的工作机制，包括模块的查找、加载和缓存过程，以及如何通过模块路径解析和依赖管理来实现模块的动态加载。此外，还讨论了require加载器在不同环境下的实现差异，如Node.js和浏览器端的区别，以及如何通过配置和插件来优化模块加载性能。通过深入理解require加载器的本质，开发者可以更高效地管理和组织前端代码，提升应用的性能和可维护性。',
        tags: [JAVASCRIPT, WEBPACK, BUILD_TOOLS, NODEJS, BROWSER_APIS],
        content: '/shorts/require加载器的原理.md',
    },
    {
        id: '296edcaa-dfe3-4f8b-97d9-8672ee027567',
        url: '/other/shorts/dynamic_shell_path_config.png',
        slug: 'dynamic_shell_path_config',
        createdAt: 1729499846517,
        title: 'shell路径动态配置',
        description:
            '文章可能涉及如何在不同的开发环境中灵活调整shell路径，以提高开发效率和代码的可移植性。此外，还可能讨论了相关的工具和技术，如环境变量管理、脚本自动化等，以帮助开发者更好地管理和优化shell路径配置。通过这些内容，读者可以学习到如何在前端项目中实现更高效和灵活的路径配置策略。',
        tags: [JAVASCRIPT, NODEJS, EXPRESS, NEXTJS, NUXTJS],
        content: '/shorts/shell路径动态配置.md',
    },
    {
        id: 'fc843a3a-5ea8-4111-83b3-cd1a70657c8e',
        url: '/other/shorts/vimium_c_plugin_shortcuts.png',
        slug: 'vimium_c_plugin_shortcuts',
        createdAt: 1729499730292,
        title: 'Vimium-C插件快捷键',
        description:
            '介绍了如何在Chrome浏览器中通过Vimium-C插件提高浏览效率，包括页面导航、标签管理、搜索功能等常用操作的快捷键设置和使用技巧。通过掌握这些快捷键，用户可以更快速地进行网页浏览和操作，提升工作效率。',
        tags: [BROWSER_APIS, WEB_COMPONENTS, DESIGN_PATTERNS, ALGORITHMS, DATA_STRUCTURES],
        content: '/shorts/Vimium-C插件快捷键.md',
    },
    {
        id: '8c10bff4-3810-46ab-91e8-b4dd1b65b501',
        url: '/other/shorts/vscode_usage_tips_summary.png',
        slug: 'vscode_usage_tips_summary',
        createdAt: 1729499272155,
        title: 'VSCode使用技巧总结',
        description:
            '在使用Visual Studio Code（VSCode）进行前端开发时，如何高效利用其各种功能和插件来提升开发效率。内容可能包括快捷键的使用、代码片段的创建与管理、插件推荐与配置、调试技巧、版本控制集成、以及如何自定义工作区设置等。通过这些技巧的总结，开发者可以更好地利用VSCode的强大功能，从而在前端开发过程中节省时间、减少错误，并提高整体开发体验。',
        tags: [BUILD_TOOLS, CODE_QUALITY, VERSION_CONTROL],
        content: '/shorts/VSCode使用技巧总结.md',
    },
    {
        id: '591e7724-2739-428d-8d59-2767c234d13e',
        url: '/other/shorts/web_frontend_unfamiliar_summary.png',
        slug: 'web_frontend_unfamiliar_summary',
        createdAt: 1729499272177,
        title: 'Web前端陌生点总结',
        description:
            'HTML、CSS、JavaScript等前端基础技术的特定用法、浏览器兼容性问题、性能优化技巧、以及一些新兴的前端框架或库的使用方法。通过总结这些陌生点，博客旨在帮助前端开发者更好地理解和掌握这些技术细节，从而提升开发效率和代码质量。',
        tags: [JAVASCRIPT, HTML, CSS, BROWSER_APIS, STATE_MANAGEMENT],
        content: '/shorts/Web前端陌生点总结.md',
    },
    {
        id: 'e0a84d3a-87da-493f-97a5-3f549a5d5302',
        url: '/other/shorts/windows_gitea_local_git_setup.png',
        slug: 'windows_gitea_local_git_setup',
        createdAt: 1729499861671,
        title: 'Windows使用Gitea搭建本地 Git',
        description:
            '文章详细介绍了Gitea的安装步骤、配置方法以及如何利用Gitea管理本地Git仓库，帮助开发者实现代码的版本控制和团队协作。通过搭建本地Git服务器，开发者可以在没有网络连接的情况下进行代码管理和版本控制，同时也能更好地保护代码的安全性和隐私性。',
        tags: [GIT, VERSION_CONTROL, DEVOPS],
        content: '/shorts/Windows使用Gitea搭建本地 Git.md',
    },
    {
        id: 'b454747e-213b-4be4-bad9-90b25f6e77d8',
        url: '/other/shorts/problem_solving_techniques.png',
        slug: 'problem_solving_techniques',
        createdAt: 1729499306829,
        title: '刷题方法',
        description:
            '如何选择合适的题目、制定刷题计划、使用不同的解题技巧、以及如何通过刷题提升编程能力和解决问题的思维方式。此外，还可能讨论了如何利用在线资源、社区和工具来辅助刷题，以及如何将刷题经验应用到实际项目中。通过这些方法，前端开发者可以更高效地提升自己的技术水平和应对复杂问题的能力。',
        tags: [ALGORITHMS, DATA_STRUCTURES, JAVASCRIPT, TESTING, CODE_QUALITY],
        content: '/shorts/刷题方法.md',
    },
    {
        id: '42876b6e-4e95-43dd-8322-181016b62dcb',
        url: '/other/shorts/optimize_mini_program.png',
        slug: 'optimize_mini_program',
        createdAt: 1729499899058,
        title: '如何优化小程序',
        description:
            '如何通过多种方法优化小程序的性能和用户体验，包括代码优化、资源管理、网络请求优化、渲染性能提升、缓存策略、懒加载技术、用户体验设计、错误监控与调试、以及持续集成与自动化测试等方面的内容。通过这些优化手段，可以有效提升小程序的加载速度、响应速度和稳定性，从而提高用户满意度和留存率。',
        tags: [PERFORMANCE, MOBILE_DEVELOPMENT, CROSS_PLATFORM],
        content: '/shorts/如何优化小程序.md',
    },
    {
        id: 'bcf88d12-d1da-44fc-9d3c-8f24a6b94a8f',
        url: '/other/shorts/crafting_quality_tech_shares.png',
        slug: 'crafting_quality_tech_shares',
        createdAt: 1729499264618,
        title: '如何做一个有质量的技术分享',
        description:
            '技术分享的核心要素，如内容的深度与广度、表达的清晰度、互动的有效性以及如何吸引和保持听众的兴趣。此外，可能还会讨论如何准备和组织技术分享，包括选择合适的主题、准备详细的演示文稿、以及如何在分享过程中应对各种挑战。通过这些内容的探讨，旨在帮助读者提升技术分享的质量，使其更具影响力和实用性。',
        tags: [CODE_QUALITY, DESIGN_PATTERNS, STATE_MANAGEMENT, TESTING, PERFORMANCE],
        content: '/shorts/如何做一个有质量的技术分享.md',
    },
    {
        id: 'bb1d8c9b-b6cc-4070-9835-6492c6a94dab',
        url: '/other/shorts/distinguish_good_vs_bad_resources.png',
        slug: 'distinguish_good_vs_bad_resources',
        createdAt: 1729499309198,
        title: '如何区分好资料还是坏资料',
        description:
            '判断资料质量的标准，如来源的可靠性、内容的时效性、作者的专业背景等。此外，还可能讨论如何通过阅读习惯、批判性思维和实践验证来提高辨别能力，从而避免被误导或浪费时间在不相关的信息上。通过这些方法，前端开发者可以更有效地获取和利用高质量的资料，提升学习和工作的效率。',
        tags: [CODE_QUALITY, DESIGN_PATTERNS, ALGORITHMS, DATA_STRUCTURES, SEO],
        content: '/shorts/如何区分好资料还是坏资料.md',
    },
    {
        id: '22dc076f-34ad-4c80-97f0-95dfa39ceadf',
        url: '/other/shorts/publish_your_own_npm_package.png',
        slug: 'publish_your_own_npm_package',
        createdAt: 1729499812052,
        title: '如何发布自己的NPM包',
        description:
            '如何发布自己的NPM包，涵盖了从初始化项目、编写代码、配置package.json到最终发布到NPM仓库的完整流程。文章详细介绍了每个步骤的具体操作，包括如何创建和配置NPM账号、如何编写和测试代码、如何处理版本管理和依赖关系，以及如何通过命令行工具将包发布到NPM。此外，还可能涉及一些发布前的准备工作，如代码优化、文档编写和测试覆盖率检查，以确保发布的包质量高且易于使用。通过这篇博客，读者可以系统地学习如何将自己的前端代码打包并分享给全球开发者社区。',
        tags: [NODEJS, JAVASCRIPT, TYPESCRIPT, BUILD_TOOLS, VERSION_CONTROL],
        content: '/shorts/如何发布自己的NPM包.md',
    },
    {
        id: '393b5949-bc63-4afc-848a-b9ded2a7448c',
        url: '/other/shorts/how_to_ask_questions.png',
        slug: 'how_to_ask_questions',
        createdAt: 1729499272112,
        title: '如何提问问题',
        description:
            '在前端开发过程中如何有效地提问问题。博客内容可能包括提问前的准备工作，如明确问题的背景、复现步骤和预期结果；提问时的技巧，如使用简洁明了的语言、提供必要的代码片段和错误信息；以及提问后的跟进，如如何处理回复和进一步澄清问题。通过这些内容，博客旨在帮助前端开发者提高问题解决的效率，促进技术社区的交流与合作。',
        tags: [CODE_QUALITY, DESIGN_PATTERNS, ALGORITHMS, DATA_STRUCTURES, GIT],
        content: '/shorts/如何提问问题.md',
    },
    {
        id: '99edeabf-26ee-4898-b3d7-0f3a3fdc373e',
        url: '/other/shorts/computer_usage_tips_summary.png',
        slug: 'computer_usage_tips_summary',
        createdAt: 1729499272041,
        title: '电脑使用技巧总结',
        description:
            '各种提高电脑使用效率和便捷性的技巧，包括但不限于操作系统优化、常用软件快捷键、文件管理技巧、网络安全防护、以及硬件维护和故障排除等方面的内容。这篇博客旨在帮助用户更好地理解和掌握电脑的各项功能，提升日常工作和学习的效率，同时增强对电脑系统的维护和管理能力。通过总结这些实用技巧，读者可以更有效地解决电脑使用过程中遇到的各种问题，从而获得更加流畅和安全的电脑使用体验。',
        tags: [BROWSER_APIS, HTTP, PERFORMANCE, SEO, WEB_COMPONENTS],
        content: '/shorts/电脑使用技巧总结.md',
    },
    {
        id: 'b67db19d-ae73-4c44-ab28-8424d4dbd4d9',
        url: '/other/shorts/programmers_career_control.png',
        slug: 'programmers_career_control',
        createdAt: 1729499268280,
        title: '程序员如何把控自己的职业',
        description:
            '程序员在职业生涯中如何有效地管理和提升自己的职业发展。文章可能涵盖了职业规划的重要性，如何设定短期和长期目标，以及如何在技术快速变化的领域中保持竞争力。此外，还可能讨论了如何通过持续学习和技能提升来应对职业挑战，以及如何在团队中建立良好的职业关系和领导力。通过这些内容的探讨，程序员可以更好地把控自己的职业方向，实现个人和职业的双重成长。',
        tags: [DESIGN_PATTERNS, ALGORITHMS, DATA_STRUCTURES, CODE_QUALITY, VERSION_CONTROL],
        content: '/shorts/程序员如何把控自己的职业.md',
    },
    {
        id: '1e23ee53-6b59-4925-9f9d-662a8464daa3',
        url: '/other/shorts/random_avatar_api.png',
        slug: 'random_avatar_api',
        createdAt: 1729499823313,
        title: '随机头像API',
        description:
            '随机头像API的使用方法和应用场景。博客内容涵盖了如何通过API获取随机头像，API的基本参数和调用方式，以及在前端开发中如何集成和使用这些随机头像。此外，还可能讨论了随机头像API的优势，如提升用户体验、增加个性化元素等，并举例说明了在不同前端项目中如何实现动态头像的显示。通过这些内容，读者可以了解到随机头像API的实际应用价值和开发技巧。',
        tags: [JAVASCRIPT, HTML, CSS, REST_API, BROWSER_APIS],
        content: '/shorts/随机头像API.md',
    },
];
